/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse400;
import io.swagger.model.Song;
import io.swagger.model.SongFilterKeys;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-01-08T23:33:38.407Z[GMT]")
@Validated
public interface SongsApi {

    @CrossOrigin(origins = "http://localhost:3000")
    @Operation(summary = "List of (selected) songs", description = "Retrieves a list of possibly filtered songs", tags={ "Songs" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Song.class)))),
        
        @ApiResponse(responseCode = "204", description = "List empty; no results"),
        
        @ApiResponse(responseCode = "400", description = "Request was not well-formed, see error details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "5XX", description = "Server error; no results, try again later") })
    @RequestMapping(value = "/songs",
        produces = { "application/json", "text/csv" },
        method = RequestMethod.GET)
    ResponseEntity<String> songsGet(@NotNull  @Max(100) @Parameter(in = ParameterIn.QUERY, description = "Limit the number of returned items" ,required=true,schema=@Schema(allowableValues={  }, maximum="100"
, defaultValue="50")) @Valid @RequestParam(value = "limit", required = true, defaultValue="50") Integer limit, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "order-by", required = false) SongFilterKeys orderBy, @Parameter(in = ParameterIn.QUERY, description = "The directorion to order the indicated column" ,schema=@Schema(allowableValues={ "asc", "desc" }
, defaultValue="desc")) @Valid @RequestParam(value = "order-dir", required = false, defaultValue="desc") String orderDir, @Parameter(in = ParameterIn.QUERY, description = "Filtering songs by title" ,schema=@Schema()) @Valid @RequestParam(value = "title", required = false) String title, @Parameter(in = ParameterIn.QUERY, description = "Filtering songs by year" ,schema=@Schema()) @Valid @RequestParam(value = "year",
required = false) String year, @Parameter(in = ParameterIn.QUERY, description = "Filtering songs by artists name" ,schema=@Schema()) @Valid @RequestParam(value = "artistsName", required = false) String name, @Parameter(in = ParameterIn.QUERY, description = "Filtering songs by artists id" ,schema=@Schema()) @Valid @RequestParam(value = "artistsID", required = false) String id);

        @CrossOrigin(origins = "http://localhost:3000")
    @Operation(summary = "Delete a song", description = "Deletes the song with the given id", tags={ "Songs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Song deleted successfully"),
        
        @ApiResponse(responseCode = "400", description = "Request was not well-formed, see error details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "5XX", description = "Server error; no results, try again later") })
    @RequestMapping(value = "/songs/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> songsIdDelete(@Parameter(in = ParameterIn.PATH, description = "The ID of the song", required=true, schema=@Schema()) @PathVariable("id") String id);

    @CrossOrigin(origins = "http://localhost:3000")
    @Operation(summary = "Retrieve a selected song", description = "Retrieves the song with the given id", tags={ "Songs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Song.class))),
        
        @ApiResponse(responseCode = "400", description = "Request was not well-formed, see error details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "5XX", description = "Server error; no results, try again later") })
    @RequestMapping(value = "/songs/{id}",
        produces = { "application/json", "application/csv" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> songsIdGet(@Parameter(in = ParameterIn.PATH, description = "The ID of the song", required=true, schema=@Schema()) @PathVariable("id") String id);

    @CrossOrigin(origins = "http://localhost:3000")
    @Operation(summary = "Update a song", description = "Updates the song with the given id", tags={ "Songs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Song updated, returns the new state", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Song.class))),
        
        @ApiResponse(responseCode = "400", description = "Request was not well-formed, see error details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "404", description = "Resource not found"),
        
        @ApiResponse(responseCode = "5XX", description = "Server error; no results, try again later") })
    @RequestMapping(value = "/songs/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/csv" }, 
        method = RequestMethod.POST)
    ResponseEntity<Song> songsIdPost(@Parameter(in = ParameterIn.PATH, description = "The ID of the song", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Song body);

    @CrossOrigin(origins = "http://localhost:3000")
    @Operation(summary = "Create a new song", description = "Creates a new song with the given information", tags={ "Songs" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Song successfully added", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Integer.class))),
        
        @ApiResponse(responseCode = "400", description = "Request was not well-formed, see error details", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse400.class))),
        
        @ApiResponse(responseCode = "409", description = "Song with the same name and artist already exists"),
        
        @ApiResponse(responseCode = "5XX", description = "Server error; no results, try again later") })
    @RequestMapping(value = "/songs",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/csv" }, 
        method = RequestMethod.POST)
    ResponseEntity<Integer> songsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Song body);
}

